/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 yoda.glb --transform --types --out-dir ../src/models 
Files: yoda.glb [1.44MB] > C:\Users\carso\OneDrive\Documents\GitHub\conuhacks-2025\public\yoda-transformed.glb [263.61KB] (82%)
Author: Renan Arruda (https://sketchfab.com/renanalvesarruda)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/mestre-yoda-maionerdmctech-9b9fe302981d41da9bfd1ef89e2856db
Title: Mestre Yoda #MaioNerdMcTech
*/

import * as THREE from 'three'
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'
import { RigidBody } from '@react-three/rapier'

type ActionName = 'Take 001'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Plane009_cabelo_MAT_0: THREE.Mesh
    Plane022_cabelo_MAT_0: THREE.Mesh
    Plane004_cabelo_MAT_0: THREE.Mesh
    Plane006_cabelo_MAT_0: THREE.Mesh
    Plane007_cabelo_MAT_0: THREE.Mesh
    Plane008_cabelo_MAT_0: THREE.Mesh
    Plane003_cabelo_MAT_0: THREE.Mesh
    Plane002_cabelo_MAT_0: THREE.Mesh
    Plane010_cabelo_MAT_0: THREE.Mesh
    Plane012_cabelo_MAT_0: THREE.Mesh
    Plane013_cabelo_MAT_0: THREE.Mesh
    Plane014_cabelo_MAT_0: THREE.Mesh
    Plane015_cabelo_MAT_0: THREE.Mesh
    Plane016_cabelo_MAT_0: THREE.Mesh
    Plane017_cabelo_MAT_0: THREE.Mesh
    Plane018_cabelo_MAT_0: THREE.Mesh
    Plane019_cabelo_MAT_0: THREE.Mesh
    Plane020_cabelo_MAT_0: THREE.Mesh
    Plane021_cabelo_MAT_0: THREE.Mesh
    Plane001_cabelo_MAT_0: THREE.Mesh
    Plane023_cabelo_MAT_0: THREE.Mesh
    Plane024_cabelo_MAT_0: THREE.Mesh
    Plane025_cabelo_MAT_0: THREE.Mesh
    Plane005_cabelo_MAT_0: THREE.Mesh
    Plane011_cabelo_MAT_0: THREE.Mesh
    sabre_MOD_SabredeLuz_MAT_0: THREE.Mesh
    bengala_MOD_bengala_MAT_0: THREE.Mesh
    capa_MOD_capa_MAT_0: THREE.Mesh
    Object_117: THREE.SkinnedMesh
    Object_119: THREE.SkinnedMesh
    _rootJoint: THREE.Bone
  }
  materials: {
    cabelo_MAT: THREE.MeshStandardMaterial
    SabredeLuz_MAT: THREE.MeshStandardMaterial
    bengala_MAT: THREE.MeshStandardMaterial
    capa_MAT: THREE.MeshStandardMaterial
    corpo_MAT: THREE.MeshStandardMaterial
    Sabre_Luz_MAT: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>()
  const { scene, animations } = useGLTF('/models/yoda-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)
  Object.values(materials).forEach((material) => {
    material.roughness = 0.9; 
    material.metalness = 0.1; 
  })

  React.useEffect(() => {
    if (actions['Take 001']) {
      actions['Take 001'].play() 
    }
  }, [actions])

  return (
    <RigidBody colliders="trimesh" lockRotations={true} scale={2.5} type="fixed">
      <group ref={group} {...props} dispose={null}>
        <group name="Sketchfab_Scene">
          <group name="RootNode" scale={0.022}>
            <group name="Object001" position={[-13.734, 21.79, 6.189]} rotation={[0.452, -0.057, 0.05]} scale={2.229} />
          </group>
          <primitive object={nodes._rootJoint} />
          <mesh name="bengala_MOD_bengala_MAT_0" geometry={nodes.bengala_MOD_bengala_MAT_0.geometry} material={materials.bengala_MAT} rotation={[-Math.PI / 2, 0, 0]} scale={0.022} />
          <mesh name="capa_MOD_capa_MAT_0" geometry={nodes.capa_MOD_capa_MAT_0.geometry} material={materials.capa_MAT} rotation={[-Math.PI / 2, 0, 0]} scale={0.022} />
          <skinnedMesh name="Object_117" geometry={nodes.Object_117.geometry} material={materials.corpo_MAT} skeleton={nodes.Object_117.skeleton} position={[0, 0.382, -0.151]} scale={0.017} />
          <skinnedMesh name="Object_119" geometry={nodes.Object_119.geometry} material={materials.Sabre_Luz_MAT} skeleton={nodes.Object_119.skeleton} position={[0, 0.382, -0.151]} scale={0.017} />
        </group>
      </group>
  </RigidBody>
  )
}

useGLTF.preload('/yoda-transformed.glb')
